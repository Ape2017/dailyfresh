# coding=utf-8
"""
Django settings for dailyfresh project.
dailyfresh项目的DJango框架配置
Generated by 'django-admin startproject' using Django 1.8.7.
使用Django 1.8.7生成“django-admin startproject”。
For more information on this file, see
有关此文件的更多信息，请参阅:
https://docs.djangoproject.com/en/1.8/topics/settings/
For the full list of settings and their values, see
有关设置及其值的完整列表，请参阅:
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 像这样在项目中构建路径：os.path.join（BASE_DIR，...）
# 项目根目录 os.path.dirname 获取上一级目录名 os.path.abspath 获取当前目录的名字
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加apps下所有应用的所在路径到python解释器的导包路径中
sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# 快速启动开发设置——不适合生产 详细信息查看下面路径
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 安全警告:保留生产秘密中使用的秘密密钥
# 秘钥 用来生成身份令牌或其他需要使用的地方
SECRET_KEY = 'y!jm-%8fi$uf4q7_h_^_9m3ea)ik8wwkin0$223ojqr7!3y_cd'

# SECURITY WARNING: don't run with debug turned on in production!
# 安全警告:不要在生产过程中运行调试
# 调试模式在正常上线时必须改为fals
# 调试模式
DEBUG = True
# ALLOWED_HOSTS是为了限定请求中的host值,以防止黑客构造包来发送请求.
# 只有在列表中的host才能访问.强烈建议不要使用*通配符去配置,
# 另外当DEBUG设置为False的时候必须配置这个配置.否则会抛出异常.配置模板如下:
# DEBUG = False
# ALLOWED_HOSTS = [
#     '.example.com',  # Allow domain and subdomains
#     '.example.com.',  # Also allow FQDN and subdomains
# ]
# 主机域名列表
ALLOWED_HOSTS = []

# Application definition
# 应用注册表
# INSTALLED_APPS是一个一元数组.里面是应用中要加载的自带或者自己定制的app包路径列表.
INSTALLED_APPS = (
    # 网站后台管理系统
    'django.contrib.admin',
    # 权限管理系统(认证系统)
    'django.contrib.auth',
    # 内容类型框架
    'django.contrib.contenttypes',
    # 会话管理
    'django.contrib.sessions',
    # 消息管理
    'django.contrib.messages',
    # 静态文件管理
    'django.contrib.staticfiles',
    # 富文本编辑器
    'tinymce',
    # 用户中心
    'users',
    # 商品管理
    'goods',
    # 订单管理
    'orders',
    # 购物车管理
    'carts',
)

# 声明django自带的认证系统要使用的用户数据表对应的模型类
# AUTH_USER_MODEL = '应用名.模型类名'
AUTH_USER_MODEL = 'users.User'

# web应用中需要加载的一些中间件列表.是一个一元数组.里面是django自带的或者定制的中间件包路径,如下：
MIDDLEWARE_CLASSES = (
    # SessionMiddleware会话中间件
    'django.contrib.sessions.middleware.SessionMiddleware',
    # CommonMiddleware“ 通用”的中间件
    'django.middleware.common.CommonMiddleware',
    # CsrfViewMiddleware CSRF保护中间件
    'django.middleware.csrf.CsrfViewMiddleware',
    #  AuthenticationMiddleware在会话中储存已认证的用户,必须在 SessionMiddleware之后运行
    # 向每个接收到的HttpRequest对象添加user属性，表示当前登录的用户。
    # AuthenticationMiddleware 认证证中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # SessionAuthenticationMiddleware 会话认证中间件
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    # MessageMiddleware 中间件消息
    'django.contrib.messages.middleware.MessageMiddleware',
    # XFrameOptionsMiddleware X-框架，选项中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # SecurityMiddleware 安全中间件
    'django.middleware.security.SecurityMiddleware',
)
# 一个字符串，表示根URLconf 的完整Python 导入路径。例如："mydjangoapps.urls"。
# 每个请求可以覆盖它，方法是设置进来的HttpRequest 对象的urlconf属性。
# 细节参见Django 如何处理一个请求。
ROOT_URLCONF = 'dailyfresh.urls'

# 模板配置
# 默认:: []（空列表）
# Django的模板使用一个列表来进行配置。列表中每一项都是一个字典类型数据，可以配置模板不同的功能。
TEMPLATES = [
    {   # BACKEND 默认值：未定义
        # 要使用的模板后端
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS 默认设置： [] (空列表)
        # 包含搜索顺序的序列，搜索引擎会按照这个顺序查找template资源文件
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # APP_DIRS 默认:False
        # Templates引擎是否应该在已安装的app中查找Template源文件
        'APP_DIRS': True,
        # OPTIONS 默认: {}（空dict）
        # 传递给模板后端的额外参数。可用参数因模板后端而异。
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# 数据库配置
# 默认：{} （空字典）
# 一个字典，包含Django 将使用的所有数据库的设置。它是一个嵌套的字典，其内容为数据库别名到包含数据库选项的字典的映射。
# DATABASES 设置必须配置一个default 数据库；可以同时指定任何数目的额外数据库。
DATABASES = {
    # 主数据库,用于写数据
    'default': {
        # ENGINE 默认：''（空字符串）
        # 使用的数据库后端。内建的数据库后端有：
        # 'django.db.backends.postgresql_psycopg2'
        # 'django.db.backends.mysql'
        # 'django.db.backends.sqlite3'
        # 'django.db.backends.oracle'
        # 你可以不使用Django 自带的数据库后端，通过设置ENGINE 为一个合法的路径即可（例如mypackage.backends.whatever）。
        'ENGINE': 'django.db.backends.mysql',
        # HOST 默认：''（空字符串）
        # 连接数据库时使用哪个主机。空字符串意味着采用localhost 作为主机。 SQLite 不需要这个选项。
        'HOST': 'localhost',
        # PORT 默认：''（空字符串）
        # 连接数据库时使用的端口。空字符串表示默认的端口。SQLite 不需要这个选项。
        'PORT': 3306,
        # NAME 默认：''（空字符串）
        # 使用的数据库名称
        'NAME': 'dailyfresh_06',
        # USER 默认：''（空字符串）
        # 连接数据库时使用的用户名。SQLite 不需要这个选项。
        'USER': 'root',
        # PASSWORD 默认：''（空字符串）
        # 连接数据库时使用的密码。SQLite 不需要这个选项。
        'PASSWORD': 'mysql'
    },
    # 读数据库,用于读数据
    'slave': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'localhost',
        'PORT': 3306,
        'NAME': 'dailyfresh_06',
        'USER': 'root',
        'PASSWORD': 'mysql'
    },
}

# 指明数据库的读写分离路由
DATABASES_ROUTERS = ['utils.db_routers.MasterSlaveRouter']

# Cache 缓存配置
# http://django-redis-chs.readthedocs.io/zh_CN/latest/#cache-backend
# 一个字典包含所有缓存要使用的设置它是一个嵌套字典，
# 其内容将高速缓存别名映射到包含单个高速缓存的选项的字典中。
# CACHES设置必须配置‘default’缓存；还可以指定任何数量的附加高速缓存。
# 如果您正在使用本地内存高速缓存之外的其他高速缓存后端，或者需要定义多个
# 高速缓存，这就需要添加其他高速缓存项。以下高速缓存选项可用。
CACHES = {
    "default": {
        # BACKEND 默认值：''（空字符串）
        # 要使用的缓存后端。内置高速缓存后端是：
        # 'django.core.cache.backends.db.DatabaseCache'
        # 'django.core.cache.backends.dummy.DummyCache'
        # 'django.core.cache.backends.filebased.FileBasedCache'
        # 'django.core.cache.backends.locmem.LocMemCache'
        # 'django.core.cache.backends.memcached.MemcachedCache'
        # 'django.core.cache.backends.memcached.PyLibMCCache'
        # 通过将BACKEND设置为缓存后端类的完全限定路径（即mypackage.backends.whatever.WhateverCache），您可以使用未随Django提供的缓存后端。 ）。
        "BACKEND": "django_redis.cache.RedisCache",
        # LOCATION 默认值：''（空字符串）
        # 要使用的缓存的位置。这可能是文件系统缓存的目录，内存缓存服务器
        # 的主机和端口，或者只是本地内存缓存的标识名称。
        "LOCATION": "redis://127.0.0.1:6379/1",
        # OPTIONS 默认值：无
        # 额外的参数传递到缓存后端。可用参数因缓存后端而异。
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Session
# http://django-redis-chs.readthedocs.io/zh_CN/latest/#session-backend
# SESSION_ENGINE 控制Django 在哪里存储会话数据。
#  默认：django.contrib.sessions.backends.db
# 包含的引擎有：
# 'django.contrib.sessions.backends.db'
# 'django.contrib.sessions.backends.file'
# 'django.contrib.sessions.backends.cache'
# 'django.contrib.sessions.backends.cached_db'
# 'django.contrib.sessions.backends.signed_cookies'
# 更多细节参见配置会话引擎。
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS 默认: 默认缓存设置
# 使用缓存存储会话时, 使用何种缓存,即CACHES中的键
SESSION_CACHE_ALIAS = "default"

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
# LANGUAGE_CODE 默认值：'en-us'
# 表示此安装的语言代码的字符串。
# 这应该是标准的language ID format。
# 例如，美国英语是"en-us"。
# 另请参阅语言标识符列表和Internationalization and localization。
# USE_I18N必须处于活动状态才能使此设置生效。
# 它有两个目的：
# 1.如果区域中间件未使用，则会决定向所有用户提供哪个翻译。
# 2.如果区域中间件处于活动状态，则它会提供后备语言，
# 以防用户的首选语言无法确定或网站不支持。
# 当用户的首选语言不存在给定文字的翻译时，它还提供后备翻译。
LANGUAGE_CODE = 'zh-hans'
# TIME_ZONE 默认：'America/Chicago'
# 一个字符串或者None，表示项目的时区。
TIME_ZONE = 'Asia/Shanghai'
# USE_I18N 默认值：True
# 这是一个布尔值，它指定Django的翻译系统是否被启用。它提供了一种简单的方式去关闭翻译系统。
# 如果设置为 False, Django 会做一些优化，不去加载翻译机制
USE_I18N = True
# USE_L10N 默认值：False
# 是一个布尔值，用于决定是否默认进行日期格式本地化。
# 如果此设置为True，例如Django将使用当前语言环境的格式显示数字和日期。
USE_L10N = True
# USE_TZ 默认: False
# 这是一个布尔值,用来指定是否使用指定的时区(TIME_ZONE)的时间.
# 若为 True, 则Django 会使用内建的时区的时间否则, Django 将会使用本地的时间
# 另请参阅TIME_ZONE，USE_I18N和USE_L10N。
# 注意:使用django-admin startproject创建的项目中的 settings.py 文件中,
# 为了方便将 USE_TZ 设置为 True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
# 静态文件路径,模板文件引用静态文件时使用
# STATIC_URL 默认值: None
# 引用位于STATIC_ROOT中的静态文件时使用的网址。
# 示例："/static/"或"http://static.example.com/"
# 如果不是None，则将用作asset definitions（Media类）和staticfiles app
# 如果设置为非空值，它必须以斜杠结尾。
# 您可能需要configure these files to be served in development，
# 并且肯定需要在生产中执行in production
STATIC_URL = '/static/'
# 将静态文件目录的路径添加到添加到静态文件路径中
# STATICFILES_DIRS 默认值：[]
# 此设置定义了在启用FileSystemFinder finder时staticfiles应用程序将遍历的附加位置。
# 如果您使用collectstatic或findstatic管理命令或使用静态文件提供视图。
# 这应该设置为一个列表或元组的字符串，其中包含您的额外文件目录的完整路径例如：
# STATICFILES_DIRS = (
#     "/home/special.polls.com/polls/static",
#     "/home/polls.com/polls/static",
#     "/opt/webfiles/common", )
# 请注意，即使在Windows上（例如"C:/Users/user/mysite/extra_static_content"），
# 这些路径应使用Unix样式的正斜杠。
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# 邮件相关信息配置
# EMAIL_BACKEND 默认：'django.core.mail.backends.smtp.EmailBackend'
# 用于发送邮件的后端。可选的后端参见发送邮件。
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST 默认：'localhost' 发送邮件使用的主机。
EMAIL_HOST = 'smtp.126.com'
# EMAIL_PORT 默认：25  EMAIL_HOST 定义的SMTP 服务器使用的端口。
EMAIL_PORT = 25
# MAIL_HOST_USER 默认：''（空字符串）
# EMAIL_HOST 定义的SMTP 服务器使用的用户名。如果为空，Django 不会尝试认证。
EMAIL_HOST_USER = 'daily_fresh@126.com'
# EMAIL_HOST_PASSWORD 默认：''（空字符串）
# EMAIL_HOST 定义的SMTP 服务器使用的密码。
# 这个设置与EMAIL_HOST_USER 一起用于SMTP 服务器的认证。
# 如果两个中有一个为空，Django 则不会尝试认证。
EMAIL_HOST_PASSWORD = 'ITCAST123'
# 邮件发件人设置
EMAIL_FROM = '天天生鲜<daily_fresh@126.com>'

# 被django的login_required装饰器使用的参数,登陆的网址
# LOGIN_URL 默认：'/accounts/login/'
# 登录的URL，特别是使用login_required()装饰器的时候。
# 这个设置还接收视图函数名称和命名的URL模式，它可以减少重复的配置，
# 因为这样你就不需要在两个地方定义该URL（settings 和URLconf）。
LOGIN_URL = "/users/login"

# FastDFS客户端的配置文件路径
FASTDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs_storage/client.conf')

# FastDFS文件存储服务器中的ngnix反向代理服务器的访问路径
FASTDFS_NGINX_URL = "http://10.211.55.5:8888/"

# 注册django使用的默认文件存储系统
DEFAULT_FILE_STORAGE = "utils.fastdfs_storage.storage.FastDFSStorage"

# tinymce富文本编辑器的配置参数
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 800,
    'height': 600,
}
